
"""%config InlineBackend.figure_format = 'retina'"""
from qiskit_optimization.applications import Maxcut, Tsp # DEPRECATED
from qiskit.algorithms.optimizers import SPSA
from scipy.optimize import minimize
from qiskit.quantum_info import SparsePauliOp
from qiskit.opflow import Z, I
from qiskit.circuit.library import EfficientSU2
from qiskit import QuantumCircuit
from qiskit.algorithms import VQE



from qiskit.circuit.library import TwoLocal
import time
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Runtime imports
from qiskit_ibm_runtime import QiskitRuntimeService, Estimator, Session, Options
from qiskit_ibm_runtime.program import UserMessenger, ProgramBackend
from qiskit_ibm_provider import IBMProvider

# Save account credentials.
QiskitRuntimeService.save_account(
    channel="ibm_quantum", token="60a6f674d4c3af8baad5ad33a982e531af05323b4664c4bf90ef0d6d346bac77b0317ebd2e261f7e4d4e903d5983d3435a32c3e634d0085b89d77cd42209bcfa",
    instance="ibm-q-research-2/marist-ibm-1/main", name="research", overwrite='True')



provider = IBMProvider()
backend = provider.get_backend("ibmq_qasm_simulator")
job = backend.run(qc)
print(job.result().get_counts())


backend = provider.get_backend('ibmq_qasm_simulator')

intermediate_info = {
    'nfev': [],
    'parameters': [],
    'energy': [],
    'stddev': []
}


def callback(nfev, parameters, energy, stddev):
    intermediate_info['nfev'].append(nfev)
    intermediate_info['parameters'].append(parameters)
    intermediate_info['energy'].append(energy)
    intermediate_info['stddev'].append(stddev)


ansatz = EfficientSU2(num_qubits, reps=1,
                      entanglement='linear', insert_barriers=True)
ansatz.draw('mpl', style='iqx')

# in this first release, the optimizer must be specified as dictionary
optimizer = {'name': 'SPSA',
             'maxiter': 50}




def program(backend: ProgramBackend, user_messenger: UserMessenger, **kwargs):
    """Function that does classical-quantum calculation."""
    #The function is below
    # UserMessenger can be used to publish interim results.


    n = 12  # Number of nodes in graph
    G = nx.Graph()
    G.add_nodes_from(np.arange(0, n, 1))
    elist = [

        (0, 1, 1.19),

        (0, 2, 1.0),

        (0, 3, 1.0),

        (0, 4, 1.19),

        (0, 5, 1.19),

        (0, 6, 1.19),

        (0, 7, 1.0),

        (0, 8, 1.19),

        (0, 9, 1.19),

        (0, 10, 1.19),

        (0, 11, 1.0),

        (1, 0, 1.19),

        (1, 4, 1.19),

        (1, 5, 1.19),

        (1, 6, 1.19),

        (1, 8, 1.19),

        (1, 9, 1.19),

        (1, 10, 1.19),

        (2, 0, 1.0),

        (2, 7, 1.0),

        (3, 0, 1.0),

        (3, 11, 1.0),

        (4, 0, 1.19),

        (4, 1, 1.19),

        (5, 0, 1.19),

        (5, 1, 1.19),

        (6, 0, 1.19),

        (6, 1, 1.19),

        (7, 0, 1.0),

        (7, 2, 1.0),

        (8, 0, 1.19),

        (8, 1, 1.19),

        (9, 0, 1.19),

        (9, 1, 1.19),

        (10, 0, 1.19),

        (10, 1, 1.19),

        (11, 0, 1.0),

        (11, 3, 1.0)]

    # tuple is (i,j,weight) where (i,j) is the edge
    G.add_weighted_edges_from(elist)

    colors = ['r' for node in G.nodes()]
    pos = nx.spring_layout(G)


    def draw_graph(G, colors, pos):
        default_axes = plt.axes(frameon=True)
        nx.draw_networkx(G, node_color=colors, node_size=600,
                        alpha=.8, ax=default_axes, pos=pos)
        edge_labels = nx.get_edge_attributes(G, 'weight')
        nx.draw_networkx_edge_labels(G, pos=pos, edge_labels=edge_labels)


    draw_graph(G, colors, pos)

    # Computing the weight matrix from the random graph
    w = np.zeros([n, n])
    for i in range(n):
        for j in range(n):
            temp = G.get_edge_data(i, j, default=0)
            if temp != 0:
                w[i, j] = temp['weight']
    print(w)

    best_cost_brute = 0
    for b in range(2**n):
        x = [int(t) for t in reversed(list(bin(b)[2:].zfill(n)))]
        cost = 0
        for i in range(n):
            for j in range(n):
                cost = cost + w[i, j]*x[i]*(1-x[j])
        if best_cost_brute < cost:
            best_cost_brute = cost
            xbest_brute = x
        print('case = ' + str(x) + ' cost = ' + str(cost))

    colors = ['r' if xbest_brute[i] == 0 else 'c' for i in range(n)]
    draw_graph(G, colors, pos)
    print('\nBest solution = ' + str(xbest_brute) +
        ' cost = ' + str(best_cost_brute))


    " Cell 2"

    # General imports

    # Pre-defined ansatz circuit and operator class for Hamiltonian

    # The IBM Qiskit Runtime
    service = QiskitRuntimeService()

    # Desired instance goes here, for running jobs on the quantum machine, use "ibm_guadalupe"
    backend = "ibmq_qasm_simulator"


    # Define our Qiskit Maxcut Instance
    max_cut = Maxcut(w)
    qp = max_cut.to_quadratic_program()

    # Translate to Ising Hamiltonian
    qubitOp, offset = qp.to_ising()

    """ # Setup our simulator
    np.random.seed(123)
    seed = 10598
    backend = Aer.get_backend('aer_simulator_statevector') # replace
    aer_estimator = AerEstimator(run_options={"shots": 2048, "seed": 10598}) """


    # Construct VQE
    opt = SPSA(maxiter=300)
    ansatz = TwoLocal(qubitOp.num_qubits, 'ry', 'cz',
                    reps=5, entanglement='linear')
    estimator = Estimator(options={"shots": 2048})

    observable = SparsePauliOp.from_sparse_list(
        [("ZX", [1, 4], 1), ("YY", [0, 3], 2)], num_qubits=5)
    print(f">>> Observable: {observable.paulis}")
    seed = 10598


    def cost_func(params, ansatz, hamiltonian, estimator):
        """Return estimate of energy from estimator

        Parameters:
            params (ndarray): Array of ansatz parameters
            ansatz (QuantumCircuit): Parameterized ansatz circuit
            hamiltonian (SparsePauliOp): Operator representation of Hamiltonian
            estimator (Estimator): Estimator primitive instance

        Returns:
            float: Energy estimate
        """
        energy = (
            estimator.run(ansatz, hamiltonian,
                        parameter_values=params).result().values[0]
        )
        return energy


    with Session(backend=backend):
        estimator = Estimator(options={"shots": 2048})
        res = minimize(
            cost_func, seed, args=(ansatz, opt, estimator), method="cobyla"
        )

    # Run VQE
    result = cost_func.compute_minimum_eigenvalue(qubitOp)

    # print results
    x = max_cut.sample_most_likely(result.eigenstate)
    print('energy:', result.eigenvalue.real)
    print('time:', result.optimizer_time)
    print('max-cut objective:', result.eigenvalue.real + offset)
    print('solution:', x)
    print('solution objective:', qp.objective.evaluate(x))

    # plot results
    colors = ['r' if x[i] == 0 else 'c' for i in range(n)]
    draw_graph(G, colors, pos)
    
    user_messenger.publish("This is an interim result.")
    return "final result"

# ======================================================================


def main(backend: ProgramBackend, user_messenger: UserMessenger, **kwargs):
    """This is the main entry point of a runtime program.

    The name of this method must not change. It also must have ``backend``
    and ``user_messenger`` as the first two positional arguments.

    Args:
        backend: Backend for the circuits to run on.
        user_messenger: Used to communicate with the program user.
        kwargs: User inputs.
    """
    # Massage the input if necessary.
    result = program(backend, user_messenger, **kwargs)
    # Final result can be directly returned
    return result
